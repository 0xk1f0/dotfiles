#!/bin/bash

# "bash strict mode"
set -uo pipefail

# settings
SMB_CREDS="/home/$USER/.smbcreds"
SMB_CFG="/home/$USER/.smbcfg"

# detect su system
if command -v /bin/sudo >> /dev/null; then
    SU_SYS="/bin/sudo"
else
    SU_SYS="/bin/doas"
fi

# modified version of https://askubuntu.com/a/1386907
chooseMenu() {
    local prompt="$1" outvar="$2"
    shift
    shift
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    scriptFeedback prompt "$prompt"
    while true
    do
        index=0
        for o in "${options[@]}"
        do
            if [ "$index" == "$cur" ]; then
                echo -e "> \e[1m\e[92m$o\e[0m\e[3m\e[0m"
            else
                echo -e "  \e[90m$o\e[3m\e[0m"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == "$esc[A" ]]
        then cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == "$esc[B" ]]
        then cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]
        then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# give user feedback
scriptFeedback() {
    case $1 in
        prompt)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" "?" " $2" 
            ;;
        error)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "1" "✗" " $2"
            exit 1
            ;;
        success)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "2" "✓" " $2" 
            ;;
        proc)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" ":" " $2"
            ;;
    esac
}

# check if multiple Servers in config exist
handleMultiple() {
    shares=()
    for shr in {1..10}; do
        if [ -v "SMB_SERVER_$shr" ]; then
            server=SMB_SERVER_${shr}
            shares+=(${!server})
        fi
    done
    shareCount=${#shares[@]}
    if [ $shareCount -gt 1 ]; then
        chooseMenu "What Drive to mount?" \
        selected_choice ${shares[@]}
        SMB_SERVER=$selected_choice
    else
        SMB_SERVER=$SMB_SERVER_1
    fi
    scriptFeedback proc "Share: $SMB_SERVER"
}

# handle unmount SMB
handleUnmount() {
    selections=(
        "no"
        "yes"
    )
    chooseMenu "Mountpoint already occupied, unmount?" \
    selected_choice ${selections[@]}
    if [ "$selected_choice" == "yes" ]; then
        if 
        "$SU_SYS" /bin/umount -l "$SMB_MOUNT"; 
        then
            scriptFeedback success "Successfully unmounted!"
            exit 0
        else
            scriptFeedback error "Some error occured!"
        fi
    else
        exit 0
    fi
}

# handle mount SMB
handleMount() {
    if
    $SU_SYS /bin/mount $SMB_SERVER -t cifs \
    -o user,uid=1000,rw,credentials=$SMB_CREDS $SMB_MOUNT; 
    then
        scriptFeedback success "Successfully mounted!"
        exit 0
    else
        scriptFeedback error "Some error occured!"
    fi
}

# check if config files exist read, else exit
if [ -e $SMB_CREDS ] && [ -e $SMB_CFG ]; then
    scriptFeedback success "SMB config files found!"
    . $SMB_CFG
else
    scriptFeedback error "No SMB config files found!"
fi

# check if mountpoint is occupied, if not, mount
if /bin/mountpoint $SMB_MOUNT >> /dev/null; then
    handleUnmount
else
    handleMultiple
    handleMount
fi
