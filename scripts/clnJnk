#!/usr/bin/env bash

# "bash strict mode"
set -uo pipefail

# get script name
_NAME=$(echo $0 | rev | cut -d '/' -f 1 | rev)

# modified version of https://askubuntu.com/a/1386907
chooseMenu() {
    local prompt="$1" outvar="$2"
    shift
    shift
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    scriptFeedback prompt "$prompt"
    while true
    do
        index=0
        for o in "${options[@]}"
        do
            if [ "$index" == "$cur" ]; then
                echo -e "> \e[1m\e[92m$o\e[0m\e[3m\e[0m"
            else
                echo -e "  \e[90m$o\e[3m\e[0m"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == "$esc[A" ]]
        then cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == "$esc[B" ]]
        then cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]
        then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# give user feedback
scriptFeedback() {
    case $1 in
        prompt)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" "?" " $2"
            ;;
        success)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "2" "✓" " $2"
            ;;
        proc)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" ":" " $2"
            ;;
        error)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "1" "✗" " $2"
            exit 1
            ;;
    esac
}

# check how full the caches are
getCacheSpace() {
    scriptFeedback proc "Pacman cache is \
$(/bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 \
| tail -n 1 2>/dev/null)"
    scriptFeedback proc "Paru cache is \
$(/bin/du -h /home/$_USER/.cache/paru/clone/ | cut -d '/' -f 1 \
| tail -n 1 2>/dev/null)"
    scriptFeedback proc "Pip cache is \
$(/bin/du -h /home/$_USER/.cache/pip/ | cut -d '/' -f 1 \
| tail -n 1 2>/dev/null)"
    scriptFeedback proc "Currently \
$(pacman -Qtdq | wc -l 2>/dev/null) orphan packages"
}

# clean pacman cache
cleanPacman() {
    if 
    $SU_SYS pacman -Scc --noconfirm >> /dev/null \
    && $SU_SYS rm -rf /var/cache/pacman/pkg/*;
    then
        scriptFeedback success "Pacman cache cleared!"
    else
        scriptFeedback error "Some error occured!"
    fi
}

# clean paru cache
cleanParu() {
    if
    rm -rf /home/$_USER/.cache/paru/clone/*;
    then
        scriptFeedback success "Paru cache cleared!"
    else
        scriptFeedback error "Some error occured!"
    fi
}

# clean pip cache
cleanPip() {
    if
    rm -rf /home/$_USER/.cache/pip/*;
    then
        scriptFeedback success "Pip cache cleared!"
    else
        scriptFeedback error "Some error occured!"
    fi
}

# clean orphnaed packages
cleanOrph() {
    if [ "$(pacman -Qtdq | wc -l)" == "0" ]; then
        return
    else
        if
        $SU_SYS pacman -Rs --noconfirm $(pacman -Qtdq) >> /dev/null;
        then
            scriptFeedback success "Obsolete packages removed!"
        else
            scriptFeedback error "Some error occured!"
        fi
    fi
}

# clean flatpak unused
cleanFlatpak() {
    if [ "$(flatpak remove --unused | tail -n 1)" == "Nothing unused to uninstall" ]; then
        return
    else
        if
        flatpak remove --unused --noninteractive >> /dev/null;
        then
            scriptFeedback success "Obsolete Flatpaks removed!"
        else
            scriptFeedback error "Some error occured!"
        fi
    fi
}

# detect su system
if command -v /bin/sudo >> /dev/null; then
    SU_SYS="/bin/sudo"
else
    SU_SYS="/bin/doas"
fi

# check for root run and react accordingly
if [ "$EUID" -eq 0 ]; then
    SU_SYS=""
    if [ -v SUDO_USER ]; then
        scriptFeedback success "Root Detected for $SUDO_USER"
        _USER=$SUDO_USER
    else
        scriptFeedback success "Root Detected for $DOAS_USER"
        _USER=$DOAS_USER
    fi
else
    _USER=$USER
fi

# get space occupation
getCacheSpace

# start selection here
selections=(
    "all"
    "pacman"
    "paru"
    "pip"
    "orphanPkgs"
    "flatpak"
    "none"
)
chooseMenu "What to clean?" selected_choice ${selections[@]}

case $selected_choice in
    "all")
        scriptFeedback proc "Clearing all caches..."
        cleanPacman
        cleanParu
        cleanPip
        cleanOrph
        cleanFlatpak
        ;;
    "pacman")
        scriptFeedback proc "Clearing pacman cache..."
        cleanPacman
        ;;
    "paru")
        scriptFeedback proc "Clearing paru cache..."
        cleanParu
        ;;
    "pip")
        scriptFeedback proc "Clearing pip cache..."
        cleanPip
        ;;
    "orphanPkgs")
        scriptFeedback proc "Removing orphan packages..."
        cleanOrph
        ;;
    "flatpak")
        scriptFeedback proc "Removing unused Flatpaks..."
        cleanFlatpak
        ;;
    "none")
        exit 0
        ;;
esac
scriptFeedback success "All Done!"
exit 0
