#!/usr/bin/env bash

# "bash strict mode"
set -uo pipefail

# tweaked fzf chooser
fzf_choose() {
    local choices=("$@")
    local prompt="${choices[-2]}"
    local output="${choices[-1]}"
    unset 'choices[-1]' && unset 'choices[-1]'
    printf -v $output \
    "$(printf "%s\n" "${choices[@]}" \
    | fzf --multi --prompt="$prompt > ")"
}

# check cache spaces
get_cache_space() {
    PACMAN_CACHE=$(/bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
    PARU_CACHE=$(/bin/du -h "/home/$_USER/.cache/paru/clone/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
    PIP_CACHE=$(/bin/du -h "/home/$_USER/.cache/pip/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
}

# detect su system
if command -v sudo >> /dev/null; then
    SU_SYS="sudo"
else
    SU_SYS="doas"
fi

# check for root run and react accordingly
if [ "$EUID" -eq 0 ]; then
    SU_SYS=""
    if [ -v SUDO_USER ]; then
        _USER=$SUDO_USER
    else
        _USER=$DOAS_USER
    fi
else
    _USER=$USER
fi

# check if fzf is available
if ! command -v fzf >> /dev/null; then
    printf "[\e[1m\e[91m✗\e[0m]%s\n" " needs 'fzf' installed!"
fi

# get space occupation
printf "[\e[1m\e[93m⧗\e[0m]%s\n" " Checking Caches.."
PACMAN_CACHE=$(/bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
PARU_CACHE=$(/bin/du -h "/home/$_USER/.cache/paru/clone/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
PIP_CACHE=$(/bin/du -h "/home/$_USER/.cache/pip/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)

# print all caches
printf "\e[1m\e[93m → \e[0m%s\n" " pacman: ${PACMAN_CACHE}"
printf "\e[1m\e[93m → \e[0m%s\n" " paru: ${PARU_CACHE}"
printf "\e[1m\e[93m → \e[0m%s\n" " pip: ${PIP_CACHE}"

# start selection here
OPTIONS=(
    "pacman"
    "paru"
    "pip"
    "orphans"
    "flatpak"
    "none"
)
fzf_choose "${OPTIONS[@]}" "What to clean?" CHOICES

for _CHOICE in ${CHOICES}; do
    _ERROR=0
    case $_CHOICE in
        "pacman")
            $SU_SYS pacman -Scc --noconfirm >> /dev/null \
            && $SU_SYS rm -rf /var/cache/pacman/pkg/*;
            _ERROR=$?
            _OLD_PACMAN_CACHE=$PACMAN_CACHE
            PACMAN_CACHE=$(/bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
            printf "[\e[1m\e[93m⧗\e[0m]%s\n" " pacman: ${_OLD_PACMAN_CACHE} → ${PACMAN_CACHE}"
        ;;
        "paru")
            rm -rf /home/$_USER/.cache/paru/clone/*;
            _ERROR=$?
            _OLD_PARU_CACHE=$PARU_CACHE
            PARU_CACHE=$(/bin/du -h "/home/$_USER/.cache/paru/clone/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
            printf "[\e[1m\e[93m⧗\e[0m]%s\n" " paru: ${_OLD_PARU_CACHE} → ${PARU_CACHE}"
        ;;
        "pip")
            rm -rf /home/$_USER/.cache/pip/*;
            _ERROR=$?
            _OLD_PIP_CACHE=$PIP_CACHE
            PIP_CACHE=$(/bin/du -h "/home/$_USER/.cache/pip/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
            printf "[\e[1m\e[93m⧗\e[0m]%s\n" " pip: ${_OLD_PIP_CACHE} → ${PIP_CACHE}"
        ;;
        "orphans")
            if [ $(pacman -Qtdq | wc -l) -gt 0 ]; then
                $SU_SYS pacman -Rs --noconfirm $(pacman -Qtdq) >> /dev/null;
                _ERROR=$?
            fi
        ;;
        "flatpak")
            flatpak remove --unused --noninteractive >> /dev/null;
            _ERROR=$?
        ;;
        "none")
            printf "[\e[1m\e[92m✓\e[0m]%s\n" " Goodbye"
            exit 0
        ;;
    esac
    if ! [ $_ERROR -eq 0 ]; then
        printf "[\e[1m\e[91m✗\e[0m]%s\n" " Error while cleaning"
        exit 1
    fi
done

printf "[\e[1m\e[92m✓\e[0m]%s\n" " Done"
exit 0
