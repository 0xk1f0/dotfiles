#!/usr/bin/env bash

# "bash strict mode"
set -uo pipefail

# modified version of https://askubuntu.com/a/1386907
chooseMenu() {
    local prompt="$1" outvar="$2"
    shift
    shift
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    printf "[\e[1m\e[93m?\e[0m]%s\n" " $prompt"
    while true
    do
        index=0
        for o in "${options[@]}"
        do
            if [ "$index" == "$cur" ]; then
                echo -e "> \e[1m\e[92m$o\e[0m\e[3m\e[0m"
            else
                echo -e "  \e[90m$o\e[3m\e[0m"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == "$esc[A" ]]
        then cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == "$esc[B" ]]
        then cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]
        then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# check how full the caches are
getCacheSpace() {
    PACMAN_CACHE=$(/bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
    printf "\e[1m\e[93m → \e[0m%s\n" " pacman: ${PACMAN_CACHE}"
    PARU_CACHE=$(/bin/du -h "/home/$_USER/.cache/paru/clone/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
    printf "\e[1m\e[93m → \e[0m%s\n" " paru: ${PARU_CACHE}"
    PIP_CACHE=$(/bin/du -h "/home/$_USER/.cache/pip/" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
    printf "\e[1m\e[93m → \e[0m%s\n" " pip: ${PIP_CACHE}"
}

# detect su system
if command -v sudo >> /dev/null; then
    SU_SYS="sudo"
else
    SU_SYS="doas"
fi

# check for root run and react accordingly
if [ "$EUID" -eq 0 ]; then
    SU_SYS=""
    if [ -v SUDO_USER ]; then
        _USER=$SUDO_USER
    else
        _USER=$DOAS_USER
    fi
else
    _USER=$USER
fi

# get space occupation
printf "[\e[1m\e[93m⧗\e[0m]%s\n" " Checking Caches.."
getCacheSpace

# start selection here
selections=(
    "pacman"
    "paru"
    "pip"
    "orphans"
    "flatpak"
    "none"
)
chooseMenu "What to clean?" selected_choice ${selections[@]}

_ERROR=0

case $selected_choice in
    "pacman")
        $SU_SYS pacman -Scc --noconfirm >> /dev/null \
        && $SU_SYS rm -rf /var/cache/pacman/pkg/*;
        _ERROR=$?
    ;;
    "paru")
        rm -rf /home/$_USER/.cache/paru/clone/*;
        _ERROR=$?
    ;;
    "pip")
        rm -rf /home/$_USER/.cache/pip/*;
        _ERROR=$?
    ;;
    "orphans")
        $SU_SYS pacman -Rs --noconfirm $(pacman -Qtdq) >> /dev/null;
        _ERROR=$?
    ;;
    "flatpak")
        flatpak remove --unused --noninteractive >> /dev/null;
        _ERROR=$?
    ;;
    "none")
        printf "[\e[1m\e[92m✓\e[0m]%s\n" " Goodbye"
        exit 0
    ;;
esac

if [ $_ERROR -eq 0 ]; then
    printf "[\e[1m\e[92m✓\e[0m]%s\n" " Done"
    getCacheSpace
    exit 0
else
    printf "[\e[1m\e[91m✗\e[0m]%s\n" " Error while cleaning"
    exit 1
fi
