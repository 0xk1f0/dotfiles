#!/usr/bin/env bash

# "bash strict mode"
set -uo pipefail

# run su check
if [ "$(/bin/grep -c "sudo" "$(which "${0}")")" -gt 1 ]; then
    printf "[\e[1m\e[91m!\e[0m]%s\n" " Contains root commands"
    sleep 1
fi

# tweaked fzf chooser
fzf_choose() {
    local choices=("$@")
    local prompt="${choices[-2]}"
    local output="${choices[-1]}"
    unset 'choices[-1]' && unset 'choices[-1]'
    printf -v $output \
    "$(printf "%s\n" "${choices[@]}" \
    | fzf --multi --prompt="$prompt > ")"
}

# check for root run and react accordingly
if [ "$EUID" -eq 0 ]; then
    if [ -v SUDO_USER ]; then
        SCRIPT_USER=$SUDO_USER
    fi
else
    SCRIPT_USER=$USER
fi

# check if fzf is available
if ! command -v fzf >> /dev/null; then
    printf "[\e[1m\e[91m✗\e[0m]%s\n" " needs 'fzf' installed!"
fi

# get space occupation
PACMAN_CACHE=$(sudo /bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
PARU_CACHE=$(sudo /bin/du -h "/home/${SCRIPT_USER}/.cache/paru" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
PIP_CACHE=$(sudo /bin/du -h "/home/${SCRIPT_USER}/.cache/pip" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)

# start selection here
OPTIONS=(
    "none"
    "unneeded"
    "pacman → ${PACMAN_CACHE}"
    "paru → ${PARU_CACHE}"
    "pip → ${PIP_CACHE}"
)
fzf_choose "${OPTIONS[@]}" "What to clean?" CHOICES

# if none in options, exit
if [[ "${CHOICES}" == *"none"* ]]; then
    printf "[\e[1m\e[92m✓\e[0m]%s\n" " Goodbye"
    exit 0
fi

# start cleaning
printf "[\e[1m\e[93m⧗\e[0m]%s\n" " Cleaning.."
for _CHOICE in ${CHOICES}; do
    _ERROR=0
    case $(echo "${_CHOICE}" | cut -d ' ' -f 1) in
        "pacman")
            sudo pacman -Scc --noconfirm >> /dev/null \
            && sudo rm -rf /var/cache/pacman/pkg/*
            _ERROR=$?
            if [ $_ERROR -eq 0 ]; then
                _PACMAN_CACHE=$(sudo /bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
                printf "[\e[1m\e[93m⧗\e[0m]%s\n" " pacman: ${PACMAN_CACHE} → ${_PACMAN_CACHE}"
            fi
        ;;
        "paru")
            echo "/home/${SCRIPT_USER}/.cache/paru/*"
            sudo rm -rf "/home/${SCRIPT_USER}/.cache/paru/*"
            _ERROR=$?
            if [ $_ERROR -eq 0 ]; then
                _PARU_CACHE=$(sudo /bin/du -h "/home/${SCRIPT_USER}/.cache/paru" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
                printf "[\e[1m\e[93m⧗\e[0m]%s\n" " paru: ${PARU_CACHE} → ${_PARU_CACHE}"
            fi
        ;;
        "pip")
            sudo rm -rf "/home/${SCRIPT_USER}/.cache/pip/*"
            _ERROR=$?
            if [ $_ERROR -eq 0 ]; then
                _PIP_CACHE=$(sudo /bin/du -h "/home/${SCRIPT_USER}/.cache/pip" | cut -d '/' -f 1 | tail -n 1 | tr -d '\t' 2> /dev/null)
                printf "[\e[1m\e[93m⧗\e[0m]%s\n" " pip: ${PIP_CACHE} → ${_PIP_CACHE}"
            fi
        ;;
        "unneeded")
            if [ "$(sudo pacman -Qtdq | wc -l)" -gt 0 ]; then
                sudo pacman -Rs --noconfirm "$(pacman -Qtdq)" >> /dev/null
                _ERROR=$?
                printf "[\e[1m\e[93m⧗\e[0m]%s\n" " pacman unused → 0"
            else
                printf "[\e[1m\e[93m⧗\e[0m]%s\n" " no packages unused"
            fi
            if [ $_ERROR -eq 0 ]; then
                _RESULT=$(flatpak uninstall --unused --noninteractive)
                _ERROR=$?
                if [[ "${_RESULT}" == *"Nothing"* ]]; then
                    printf "[\e[1m\e[93m⧗\e[0m]%s\n" " no flatpaks unused"
                else
                    printf "[\e[1m\e[93m⧗\e[0m]%s\n" " flatpak unused → 0"
                fi
            fi
        ;;
    esac
    if ! [ $_ERROR -eq 0 ]; then
        printf "[\e[1m\e[91m✗\e[0m]%s\n" " Error while cleaning"
        exit 1
    fi
done

printf "[\e[1m\e[92m✓\e[0m]%s\n" " Done"
exit 0
