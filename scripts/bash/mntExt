#!/usr/bin/env bash

# "bash strict mode"
set -uo pipefail

# dont run as root
if [ $EUID -eq 0 ]; then
    printf "[\e[1m\e[91m✗\e[0m]%s\n" " Run as user"
    exit 1
fi

# run su check
if [ "$(/usr/bin/grep -c "sudo" "$(which "${0}")")" -gt 1 ]; then
    printf "[\e[1m\e[91m!\e[0m]%s\n" " Contains root commands"
    sleep 0.5
fi

# tweaked fzf chooser
fzf_choose() {
    local choices=("$@")
    local prompt="${choices[-2]}"
    local output="${choices[-1]}"
    unset 'choices[-1]' && unset 'choices[-1]'
    printf -v $output \
    "$(printf "%s\n" "${choices[@]}" \
    | fzf --multi --prompt="$prompt > ")"
}

# drive chooser
choose_drive() {
    FETCHDRIVES=$(lsblk -l | /usr/bin/grep -E \
    'sd[a-zA-Z][0-9]|nvme[0-9]n[0-9]p[0-9]' \
    | tr -s ' ' ' ' | cut -d ' ' -f 1)
    local _OPTIONS=""
    for d in ${FETCHDRIVES}; do
        mountStat=$(lsblk -l | /usr/bin/grep "$d" | tr -s ' ' ' ' \
        | cut -d ' ' -f 7)
        if [ -z "$mountStat" ]; then
            _OPTIONS="${_OPTIONS}""${d} "
        fi
    done
    if [ -z "${_OPTIONS}" ]; then
        printf "[\e[1m\e[92m✓\e[0m]%s\n" " No mountable drives"
        exit 0
    else
        fzf_choose "${_OPTIONS[@]}" \
        "What Drive to mount?" DRIVE
    fi
}

# fs chooser
choose_fs() {
    local _OPTIONS=(
        "auto"
        "ntfs3"
        "ext4"
        "vfat"
    )
    fzf_choose "${_OPTIONS[@]}" \
    "What filesystem to mount with?" FS
}

# unmount mountpoint if user wants
handle_unmount() {
    local _OPTIONS=(
        "no"
        "yes"
    )
    fzf_choose "${_OPTIONS[@]}" \
    "Mountpoint already occupied, unmount?" UMOUNT_CHOICE
    if [ "${UMOUNT_CHOICE}" == "yes" ]; then
        if 
        sudo umount -l "${MOUNTPOINT}"; 
        then
            printf "[\e[1m\e[92m✓\e[0m]%s\n" " Done"
            exit 0
        else
            printf "[\e[1m\e[91m✗\e[0m]%s\n" " Unmount error"
            exit 1
        fi
    else
        exit 0
    fi
}

# mount drive after selections
handle_mount() {
    DRIVESPACE=$(lsblk -l | /usr/bin/grep "$DRIVE" | tr -s ' ' ' ' | cut -d ' ' -f 4)
    printf "[\e[1m\e[93m⧗\e[0m]%s\n" \
    " Mounting '/dev/${DRIVE}' (${DRIVESPACE}) with '${FS}' to '${MOUNTPOINT}'"
    local _OPTIONS=(
        "no"
        "yes"
    )
    fzf_choose "${_OPTIONS[@]}" "Correct?" MOUNT_CHOICE
    if [ "${MOUNT_CHOICE}" == "yes" ]; then
        if
        sudo mount -t "${FS}" "/dev/${DRIVE}" "${MOUNTPOINT}";
        then
            printf "[\e[1m\e[92m✓\e[0m]%s\n" " Done"
            exit 0
        else
            printf "[\e[1m\e[91m✗\e[0m]%s\n" " Mount error"
            exit 1
        fi
        
    else
        exit 0
    fi
}

# check for mountpoint
if [ ! -v 1 ]; then
    printf "[\e[1m\e[91m✗\e[0m]%s\n" " No mountpoint specified"
    exit 1
else
    if [ ! -d "${1}" ]; then
        printf "[\e[1m\e[91m✗\e[0m]%s\n" " Mountpoint does not exist"
        exit 1
    else
        MOUNTPOINT="${1}"
    fi
fi

# then check if mountpoint is occupied, if not continue
if mountpoint "${MOUNTPOINT}" >> /dev/null; then
    handle_unmount
else
    choose_drive
    choose_fs
    handle_mount
fi
