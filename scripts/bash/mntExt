#!/usr/bin/env bash

# "bash strict mode"
set -uo pipefail

# modified version of https://askubuntu.com/a/1386907
chooseMenu() {
    local prompt="$1" outvar="$2"
    shift
    shift
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    scriptFeedback prompt "$prompt"
    while true
    do
        index=0
        for o in "${options[@]}"
        do
            local spc=""
            if [ $isDrivePrompt = true ]; then
                spc=" ($(lsblk -l | grep "$o" | tr -s ' ' ' ' \
                | cut -d ' ' -f 4))"
            fi
            if [ "$index" == "$cur" ]; then
                echo -e "> \e[1m\e[92m$o\e[0m\e[3m$spc\e[0m"
            else
                echo -e "  \e[90m$o\e[3m$spc\e[0m"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == "$esc[A" ]]
        then cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == "$esc[B" ]]
        then cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]
        then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# give user feedback
scriptFeedback() {
    case $1 in
        prompt)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" "?" " $2"
            ;;
        error)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "1" "✗" " $2"
            exit 1
            ;;
        success)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "2" "✓" " $2"
            ;;
        proc)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" ":" " $2"
            ;;
    esac
}

# drive chooser
chooseDrive() {
    adj_selections=""
    for d in $FETCHDRIVES; do
        mountStat=$(lsblk -l | grep "$d" | tr -s ' ' ' ' \
        | cut -d ' ' -f 7)
        if [ -z $mountStat ]; then
            adj_selections="$adj_selections""$d "
        fi
    done
    if [ -z "$adj_selections" ]; then
        scriptFeedback proc "No mountable drives found!"
        exit 0
    else
        isDrivePrompt=true
        chooseMenu "What Drive to mount?" \
        selected_choice ${adj_selections[@]}
        DRIVE=$selected_choice
        isDrivePrompt=false
    fi
}

# fs chooser
chooseFS() {
    selections=(
        "auto"
        "ntfs3"
        "ext4"
        "xfs"
        "vfat"
    )
    chooseMenu "What filesystem to mount with?" \
    selected_choice ${selections[@]}
    FS=$selected_choice
}

# unmount mountpoint if user wants
handleUnmount() {
    selections=(
        "no"
        "yes"
    )
    chooseMenu "Mountpoint already occupied, unmount?" \
    selected_choice ${selections[@]}
    if [ "$selected_choice" == "yes" ]; then
        if 
        $SU_SYS /bin/umount -l $MOUNTPOINT; 
        then
            scriptFeedback success "Successfully unmounted!"
            exit 0
        else
            scriptFeedback error "Some error occured!"
        fi
    else
        exit 0
    fi
}

# mount drive after selections
handleMount() {
    DRIVESPACE=$(lsblk -l | grep "$DRIVE" | tr -s ' ' ' ' \
    | cut -d ' ' -f 4)
    DRIVE="/dev/""$DRIVE"
    scriptFeedback proc "Mounting '$DRIVE' ($DRIVESPACE) \
with '$FS' to '$MOUNTPOINT\'"
    selections=(
        "no"
        "yes"
    )
    chooseMenu "Correct?" selected_choice ${selections[@]}
    if [ "$selected_choice" == "yes" ]; then
        if
        $SU_SYS /bin/mount -t $FS $DRIVE $MOUNTPOINT;
        then
            scriptFeedback success "Successfully mounted!"
            exit 0
        else
            scriptFeedback error "Some error occured!"
        fi
        
    else
        exit 0
    fi
}

# detect su system
if command -v /bin/sudo >> /dev/null; then
    SU_SYS="/bin/sudo"
else
    SU_SYS="/bin/doas"
fi

# check for root run
if [ "$EUID" -eq 0 ]; then
    # dont use sudo or doas
    scriptFeedback success "Root Detected"
    SU_SYS=""
fi

# no drive prompt
isDrivePrompt=false
# first get list of mountable drives
FETCHDRIVES=$(/bin/lsblk -l | grep -E \
'sd[a-zA-Z][0-9]|nvme[0-9]n[0-9]p[0-9]' \
| tr -s ' ' ' ' | cut -d ' ' -f 1)

# get supplied mountpoint
if [ -v 1 ]; then
    MOUNTPOINT=$1
else
    scriptFeedback error "Supply a mountpoint!"
fi

# then check if mountpoint is occupied, if not continue
if /bin/mountpoint "$MOUNTPOINT" >> /dev/null; then
    handleUnmount
else
    chooseDrive
    chooseFS
    handleMount
fi
