#!/bin/bash

# "bash strict mode"
set -uo pipefail

# settings
SMB_CREDS="/home/$USER/.smbcreds"
SMB_CFG="/home/$USER/.smbcfg"

# modified version of https://askubuntu.com/a/1386907
chooseMenu() {
    local prompt="$1" outvar="$2"
    shift
    shift
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    scriptFeedback prompt "$prompt"
    while true
    do
        index=0
        for o in "${options[@]}"
        do
            if [ "$index" == "$cur" ]; then
                echo -e "> \e[1m\e[92m$o\e[0m\e[3m\e[0m"
            else
                echo -e "  \e[90m$o\e[3m\e[0m"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == $esc[A ]]
        then cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == $esc[B ]]
        then cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]
        then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# give user feedback
scriptFeedback() {
    case $1 in
        prompt)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" "?" " $2" 
            ;;
        error)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "1" "✗" " $2" 
            ;;
        success)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "2" "✓" " $2" 
            ;;
    esac
}

# unmount SMB if user wants
handleUnmount() {
    selections=(
        "no"
        "yes"
    )
    chooseMenu "Mountpoint already occupied, unmount?" selected_choice ${selections[@]}
    if [ "$selected_choice" == "yes" ]; then
        if 
        "$SU_SYS" /bin/umount -l "$SMB_MOUNT"; 
        then
            clear
            scriptFeedback success "Successfully unmounted!"
            exit 0
        else
            scriptFeedback error "Some error occured!"
            exit 1
        fi
    else
        clear
        scriptFeedback error "Mountpoint already occupied!"
        exit 1
    fi
}

# mount SMB
handleMount() {
    if
    "$SU_SYS" /bin/mount $SMB_SERVER -t cifs -o user,uid=1000,rw,credentials=$SMB_CREDS $SMB_MOUNT; 
    then
        clear
        scriptFeedback success "Successfully mounted!"
        exit 0
    else
        scriptFeedback error "Some error occured!"
        exit 1
    fi
}

# read config
readConfig() {
    while read -r line; do
        case $line in
            "serverPath"*)
                SMB_SERVER=$(echo "$line" | cut -d "=" -f 2)
                ;;
            "serverMount"*)
                SMB_MOUNT=$(echo "$line" | cut -d "=" -f 2)
                ;;
        esac
    done < "$1"
}

# detect su system
if command -v /bin/sudo >> /dev/null; then
    SU_SYS="/bin/sudo"
else
    SU_SYS="/bin/doas"
fi

# check if config files exist, else exit
if [ -e $SMB_CREDS ] && [ -e $SMB_CFG ]; then
    scriptFeedback success "SMB config files found!"
else
    scriptFeedback error "No SMB config files found!"
    exit 1
fi

# read config files
readConfig "$SMB_CFG"

# then check if mountpoint is occupied, if not continue
if /bin/mountpoint "$SMB_MOUNT" >> /dev/null; then
    handleUnmount
else
    handleMount
fi
