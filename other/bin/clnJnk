#!/bin/bash

# "bash strict mode"
set -uo pipefail

# modified version of https://askubuntu.com/a/1386907
chooseMenu() {
    local prompt="$1" outvar="$2"
    shift
    shift
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    scriptFeedback prompt "$prompt"
    while true
    do
        index=0
        for o in "${options[@]}"
        do
            if [ "$index" == "$cur" ]; then
                echo -e "> \e[1m\e[92m$o\e[0m\e[3m\e[0m"
            else
                echo -e "  \e[90m$o\e[3m\e[0m"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == $esc[A ]]
        then cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == $esc[B ]]
        then cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]
        then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# give user feedback
scriptFeedback() {
    case $1 in
        prompt)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" "?" " $2"
            ;;
        success)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "2" "âœ“" " $2"
            ;;
        proc)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "3" ".." " $2"
            ;;
        normExit)
            printf "[\e[1m\e[9%sm%s\e[0m]%s\n" "1" "/" " $2" 
            ;;
    esac
}

# check how full the caches are
getCacheSpace() {
    scriptFeedback proc "Pacman cache is $(/bin/du -h /var/cache/pacman/pkg/ | cut -d '/' -f 1)"
    scriptFeedback proc "Paru cache is $(/bin/du -h /home/$USER/.cache/paru/clone/ | cut -d '/' -f 1)"
    scriptFeedback proc "Pip cache is $(/bin/du -h /home/$USER/.cache/pip/ | cut -d '/' -f 1)"
}

# clean pacman cache
cleanPacman() {
    $SU_SYS pacman -Scc --noconfirm >> /dev/null
    $SU_SYS rm -rf /var/cache/pacman/pkg/*
}

# clean paru cache
cleanParu() {
    rm -rf /home/$USER/.cache/paru/clone/*
}

# clean pip cache
cleanPip() {
    rm -rf /home/$USER/.cache/pip/*
}

# detect su system
if command -v /bin/sudo >> /dev/null; then
    SU_SYS="/bin/sudo"
else
    SU_SYS="/bin/doas"
fi

# get space occupation
getCacheSpace

# start selection here
selections=(
    "all"
    "select"
    "none"
)
chooseMenu "What do you want to clean?" selected_choice ${selections[@]}

if [ "$selected_choice" == "all" ]; then
    scriptFeedback proc "Clearing pacman/paru/pip caches..."
    cleanPacman
    cleanParu
    cleanPip
    scriptFeedback success "All caches cleared!"
    exit 0
elif [ "$selected_choice" == "select" ]; then
    selections=(
        "pacman"
        "paru"
        "pip"
    )
    chooseMenu "What cache specifically?" selected_choice ${selections[@]}
    case $selected_choice in
        "pacman")
            scriptFeedback proc "Clearing pacman cache..."
            cleanPacman
            scriptFeedback success "Pacman cache cleared!"
            exit 0
            ;;
        "paru")
            scriptFeedback proc "Clearing paru cache..."
            cleanParu
            scriptFeedback success "Paru cache cleared!"
            exit 0
            ;;
        "pip")
            scriptFeedback proc "Clearing pip cache..."
            cleanPip
            scriptFeedback success "Pip cache cleared!"
            exit 0
            ;;
    esac
else
    scriptFeedback normExit "Exiting..."
    exit 0
fi
